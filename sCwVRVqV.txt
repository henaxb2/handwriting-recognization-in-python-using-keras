# organize imports
import numpy as np
import matplotlib.pyplot as plt
from keras.models import Sequential
from keras.layers.core import Dense, Activation
from keras.datasets import mnist
from keras.utils import np_utils

# fix a random seed for reproducibility
np.random.seed(9)

# split the mnist data into train and test
(trainData, trainLabels), (testData, testLabels) = mnist.load_data()


# reshape the dataset
trainData = trainData.reshape(60000, 784)
testData = testData.reshape(10000, 784)
trainData = trainData / 255
testData = testData / 255


# convert numbers into one hot encoded form 
mTrainLabels = np_utils.to_categorical(trainLabels,10)
mTestLabels = np_utils.to_categorical(testLabels, 10)

# create the model
model = Sequential()
model.add(Dense(512, input_dim=784))
model.add(Activation("relu"))
model.add(Dense(256))
model.add(Activation("relu"))
model.add(Dense(10))
model.add(Activation("softmax"))

# compile the model
model.compile(loss="categorical_crossentropy",
			  optimizer="adam",
			  metrics=["accuracy"])

# fit the model
model.fit(trainData, 
				 	mTrainLabels,
					batch_size=128,
					epochs=5)

scores = model.evaluate(testData, mTestLabels)

# print the accuracy
print("test accuracy is = " + str(scores[1]))


import matplotlib.pyplot as plt

# grab some test images from the test data
test_image = testData[0]

# reshape the test image to [1x784] format so that our model understands
test_image = test_image.reshape(1,784)
	
# make prediction on test image using our trained model
prediction = model.predict_classes(test_image)
	
# reshape the test images to standard 28x28 format
test_image = test_image.reshape(28,28)

# display the prediction and image
plt.imshow(test_image)
plt.show()

print ("Let me think ....hmm...got it...it's " + str(prediction[0]))